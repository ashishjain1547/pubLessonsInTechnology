WITHOUT BINARY SEARCH

"""
Compute the number of intersections in a sequence of discs.
Task Score
62%

Correctness
100%

Performance
25%
"""

# you can write to stdout for debugging purposes, e.g.
# print("this is a debug message")

def solution(A):
    # Implement your solution here

    # Get the start and end indices of the disks and sort them based on the start indices

    start_and_end = []
    for i in range(len(A)):
        temp = {
            'start': i - A[i],
            'end': i + A[i]
        }
        start_and_end.append(temp)

    start_and_end.sort(key = lambda d: d['start'])

    # Search for the starting index bigger than the current end index

    intersections = []
    for i in range(len(start_and_end)):
        end = start_and_end[i]['end']
        cnt_intersections = 0    
        for j in range(i+1, len(start_and_end)):
            if start_and_end[j]['start'] <= end:
                cnt_intersections += 1
            else:
                break
        intersections.append(cnt_intersections)
    return sum(intersections)




WITH BINARY SEARCH



# you can write to stdout for debugging purposes, e.g.
# print("this is a debug message")

import math

def solution(A):
    # Implement your solution here

    # Get the start and end indices of the disks and sort them based on the start indices

    start_and_end = []
    for i in range(len(A)):
        temp = {
            'start': i - A[i],
            'end': i + A[i]
        }
        start_and_end.append(temp)

    start_and_end.sort(key = lambda d: d['start'])

    # Search for the starting index bigger than the current end index    

    intersections = []
    for i in range(len(start_and_end)):

        search_ended = False
         
        startix = i
        endix = len(start_and_end) - 1
        ix = math.floor(startix + (endix - startix) / 2)

        print(start_and_end[i]['end'])
        while (not search_ended):
            print(startix, endix, ix)
            print(start_and_end[ix])
            if start_and_end[ix]['start'] <= start_and_end[i]['end'] \
            and start_and_end[ix+1]['start'] > start_and_end[i]['end']:
                break
            else:
                if start_and_end[ix]['start'] <= start_and_end[i]['end'] \
                and start_and_end[ix+1]['start'] <= start_and_end[i]['end']:
                    startix = ix
                    ix = math.floor(startix + (endix - startix) / 2)

                    if startix == ix:
                        break
           
                else:
                    endix = ix
                    ix = math.floor(startix + (endix - startix) / 2)
       
        intersections.append(ix - i)    

    return sum(intersections)


----------------------------------------------

Haleon

Am interested in knowing about this project mentioned here on your resume that says you worked on a project analysing the web traffic. Can you please elaborate a bit more about that?

Q: How did you decide that it is Poisson Distribution that would describe the traffic on site?
Q: How did you evaluate the model you built for modeling the traffic on the site?

Q: What all considerations do you need to make as part of feature engineering a data set before clustering activity?

Q: How do you Unit Test a module? Tell me how you Unit Testing.
